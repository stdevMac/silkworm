/*
   Copyright 2020-2021 The Silkworm Authors

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#include <filesystem>
#include <string>

#include <core/silkworm/state/OverlayState.h>

#include <silkworm/chain/config.hpp>
#include <silkworm/common/endian.hpp>
#include <silkworm/common/log.hpp>
#include <silkworm/common/stopwatch.hpp>
#include <silkworm/consensus/engine.hpp>
#include <silkworm/db/CommonData.h>
#include <silkworm/db/FixedHash.h>
#include <silkworm/db/OverlayDB.h>
#include <silkworm/db/access_layer.hpp>
#include <silkworm/db/buffer.hpp>
#include <silkworm/db/stages.hpp>
#include <silkworm/execution/processor.hpp>

#include "stagedsync.hpp"

using namespace silkworm;
using namespace silkworm::db;

namespace silkworm::stagedsync {

void insert_witness(mdbx::txn& txn, db::OverlayDB& odb) {
    auto state{db::open_cursor(txn, db::table::kPlainState)};
    mdbx::slice value{};
    auto key = mdbx::slice("0xbc4da42c51a54602e97563f49e236495284a4efdd4514d2de45f25b6f1ffd5a8");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f90211a02b647cb807a3fe8a21d1e6bd9c079e8c8e27d41bfea397f673ffdaf1793383c2a06be39feb8b104bae"
            "d9da563a0428e846bce11d8c02b81b9f5c5452b083b7e082a0d582d771e4e023d0c11329d1904c755c70d2ade5"
            "bb8b4619db17189931d2b45ea086673bbd6c985ddade2c83277a4ba17d124e7f27bdb8f3b0040a81fddcfa63d1"
            "a032ab0e6427a1aa2b30094d07dcd3be1ffaa58e9a2a7eb77385dcdf2c327a9fc2a0b468e2fc9424bf8bcf64cc"
            "3100123f6ddb417c4678736211d9dc315d0fdae53ea0d8658c63e36d6464c9a4e9b1793e4d07fbadd0ab590362"
            "d95bb9900303b9a1baa0ef0bc769d91a7cd9f173878e7ca5916816742d10f356aa5da3a7aa548f85eef3a05a08"
            "1ca5d6a0f654506122d8cfa404d8bc28e6f8642befffa985e109bc6237ada0146b29cb6aa77689e0e80ed74e85"
            "931fd7987d865422a3fb32da20cf6c1f751da0ab0bbef0fe4b3b9ee60dd05f933a0cae50b9076ca3badb8f01b6"
            "fd59c1ca8ff8a0dd2fb81d97f565eb14cf0172ca3f4e79711804178adce020c45bd51e44065f77a00cd280b835"
            "4ecf96060702eba54ca02112ed8e46abc4968caa27756cda7aba22a0d057926d397ae4ad419fdb3b2f025dffb6"
            "5f8637a7ca4f15b66832bca1f5d130a0976f8be12bf9d64b02da5df38a631bda7052ea05a8e789fcfd1d16f21d"
            "341b35a0d5f52284d31ba2841b854af70c0f589b05177052c0c154cdac57ea687f6632b080");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    key = mdbx::slice("0x0cd280b8354ecf96060702eba54ca02112ed8e46abc4968caa27756cda7aba22");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f90211a05bb628177c51d51037059156bc38749b184010b19cfb2bccf2984c035c7ca4dda0de7e2901f1149a8b"
            "d665b7c533eebb5bf4b693800f92d5e6e5780cf7ec1103dba0534c416a7c0a6bd3b91cfb29440aa6c4b0075f8b"
            "13ffc55f37e9113bc706e2a0a04e338dbc806c6aeba5e866c3a5b89fe5636314081b79f4c7f780b068774a60f7"
            "a08a9fc963d8f38ac3c4a442202a5cdd37eeee607783ba0cedf269acb2cf317f73a01b31a2e7808720e249a78f"
            "ebfb187946852dd0e6d4203673b6889e3744fec4eaa09e2336fd03941004eecb202833190a973e2fe3c2d838d0"
            "3c8f17db5f1733711fa0db272d84889a98c4e06f7f6ee1d99bb4ab55c86e6f186915ab77c06b87c7107da07705"
            "18e934777832226beb3659450be8264c1cd36d924d22f81329cd9b1f2737a0e3ecaad725dfa9468d48fca908b4"
            "4035a82f4014f053cc0bd8a63de51792e37da09c9484466fe8371e1eccd2a8073736ab1d18d4026c86328847bc"
            "7dfd5569e80aa07ddd5a10e9133debbfe9820d12a05299c7b58cc73677f359d2c52e0992f6c935a0c77326c260"
            "fe8a94beaae4102a8eee1f061c8948a4ae1af0ecd9a5571014c33fa063c479ab438d6ff07a95644478048d0266"
            "8725accabe1b4450aafeb4d3501319a0e41a03dd53a8831ea93f52f719caf26c7de8f4bbb8470f437eda754c6e"
            "bf748aa08c374d9655045bf8a0f62996d5d2ce6683be819fd24b455aa8a9dfaf273eda7780");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    key = mdbx::slice("0x63c479ab438d6ff07a95644478048d02668725accabe1b4450aafeb4d3501319");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f90211a04c502308723955334eae281a825a0bc4cc9199cf7efe6e88b9a76be41d3729d0a079e239bfa186a7c4"
            "2b68aba4e9e42d6899148a4de0d7a1a7f657ed5137b59fcca0b8865e7852fa2a54d7101bd79570e8e279acc0fc"
            "20f26dfe5a95e6f901a5a00fa0b97b62e0c87a0437c8ddece4ea899dec87ecfe5c249edf76c77551b8d4832c57"
            "a0e69ea70b026ccb3fb2e1424f5614a9cededa1f0c3f1958fa95103244f7a6b828a0bf171c930b70944c33687f"
            "f504f834ef66f231a659803eaf81b58356e59ccf6ea0c3675c426ebc43bbf6c3a84d68de2e65c4783ec381281b"
            "fcae0f9fa522cf864fa0dcf284bc2d647b363b667cf980d9c2656fb412e687dd969598065f7c2313bba2a00215"
            "657e3be6da5dc9a6e6026d9503253c4bdba73b8a4f6247f3cf56c411e7e4a065a7d2249c01cf452721880668ce"
            "97a623ee542a8974cebbb6fe89e74e25e058a04aceaf715cf844abc7bb4bc75776085c05d3ed82c90b38e3f911"
            "a096c61f13d4a074bcfd1493c9369d8ad8bf2658be1d95529f11a33e89f9fdb0f2d81f7d35c6cfa055dee0b167"
            "532a4ce037f35c0d6701d70147b70872305b27e9cb113fb32faf9ca08dfb09899f966a4e02c0273866eb58c7ec"
            "87c0c567f6577f39fb8b5ea3a92677a0b407375cdb6af7783f976238230ad494b6e07b7263c0b1e8176b22d0ad"
            "e5b35aa06aae033c38b9b0e7c8407410fbf99ec2b554e016a6bc182e3a47ee097876a6b080");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    key = mdbx::slice("0xb8865e7852fa2a54d7101bd79570e8e279acc0fc20f26dfe5a95e6f901a5a00f");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f891808080a0208ffdee9912762dce630a8274550d83ee931de1f5d91945d3f64451e9f57b908080a0044c21be"
            "c02b96201e05b104f6c18a9fff309236d14a217d8675d1375a3ebc88a010973a3632910c50a255e8ff10f827d9"
            "25ffd19c8607859544bc5d597282803580a0aa98138a6a7a7e1b77edf735cf1ae4dc4df7fd86a9d5d8c3b184f8"
            "0ce87f1d2080808080808080");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    key = mdbx::slice("0x208ffdee9912762dce630a8274550d83ee931de1f5d91945d3f64451e9f57b90");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f8749f2083c03ce0b55c830c915be63e218bc20ad607e774fe830315146a47a6bc75b852f8508201ef8a13884d"
            "700f7cea738f17a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d24601"
            "86f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    key = mdbx::slice("0xdd2fb81d97f565eb14cf0172ca3f4e79711804178adce020c45bd51e44065f77");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f90211a08aefa559db8519ef6990d4ec4926f38832f994ecc52c0c8db3647bb10a07f750a06f2eff35c9bdf856"
            "8105a98a969b0b1bf567330d1666cefc4d64aa55203404f0a05b1f3e4b64ae3955e39846c845f21f94a71fa38c"
            "499322d60f527e4a013f473ba0f6b45d3d8804bf0a4ee0fbfd923bf4dd89f20512890131a688c4d6f266913f0c"
            "a0f42bf1ee70b1a0e3e44b323e5e31609808bb6dc54b715105c614d812799fac0aa0458a78d5492c33f453ec9c"
            "b02da81e6458845f1ebc7210181e35877cb1dcbdd8a0d190d7e95124c88f3091bd8474f34ec2021f21cfea1bf9"
            "4175c90dbcc3b2c12ea05ba80f5b36547334c267e6f245e8bfe85a898f2a22373c11f5d16e41cdb269a7a0032c"
            "722143d72392828377868282ee10feaf3ef42cc3501b46037189bbeb98aca054f4e4c3b907bbef0dfd64d80367"
            "423b63cfcaf5db26a25fcf564c2393d0d0bba00af06e652d7da6e3506aa480137e2aa2aa24fe23a7e74bdf20aa"
            "c92889824134a0b40a4d5eb05c157782da79f0e54515a0abc5aafcf6e66ff0f4a9a4641fdb0c21a046bed3783c"
            "5f26e101dde08f4b5f0574ff38f084943d0b33c37ae36595575e50a096bdd03dcabf36f1e930dd0459aa1c056b"
            "c370aa516f24ffad4a6c20c34b26aaa0e04cc02856f81fab0368368c8de5394b7e8e840dc6072009b2a1fcb5be"
            "0f81f6a0fdcfad86e1a0648afb8681166d0706d3fdb808437a596b20f86d4aefc25058e080");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    key = mdbx::slice("0x96bdd03dcabf36f1e930dd0459aa1c056bc370aa516f24ffad4a6c20c34b26aa");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f90211a05a959eb3c42a1cf362d5b922934439310840ad23f4e0fc42649542e3a9c75c1da0071dc96890977be0"
            "280a52a27f7e746e24d2353df8caf99d36b09029c4704ce4a066d634eda8a94ad69bad9642473ccad235b85c1d"
            "22c9027dd5c892dab8cabd2ba09371107c5b286ca362ac684d52732418cfeb8314b2dddc93e3e1113fdd0ae746"
            "a0ca40306c7d65390c8b06348d1fd612e410e902b8f92836901abd443bd7ffd863a06db5cafe213d8adfbc2cb3"
            "53794a3aaf28f184ca33f925ffc71784ab80b50ddea0e3a9a7cdad7e4d5cdad9e0459aac79e9711e4e5c0edc30"
            "8334b8152cdb1b9639a0945e5128579e932d32f6ede20ba7c5ae9e3ccca3d505d0e24c3b3e77d37b9213a0f3c7"
            "fd50823de55e1942bad8dddeccf092a7ccc23055269615a0206a404efa1da0413e7210ca0015117c66af77a860"
            "5134db957ccc9f25adfabe3651cac775ef08a0c71a0f9e5c18a985f8c7d742f483b52d01199fb2e6586d91d245"
            "78144e40a009a0cf7a48d11ce96c97e257797780db24856b36515cedc7970be7c761791408ff8aa00ecddf951e"
            "4a2165f47817d76815aae2ba12365caaaf5867885e30d79753f463a06305fde0d1d6752103b1329d5ad7de4db8"
            "26f55e058b41769d004965d35278cba0799f350e70e4fd7a0462bb089c3da811d9ec8943716f150edd4b6e09d9"
            "502ae4a0322d430a8ec0223a3971997513554bdc43db0a4b0570f6d257b32ae345cd143380");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    key = mdbx::slice("0x5a959eb3c42a1cf362d5b922934439310840ad23f4e0fc42649542e3a9c75c1d");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f89180808080808080a0e0d591322c0bf95c92b1ca958bc78dfabb2276d751c2d77a77e9029056e14de180a0c9"
            "379825c422eebbfe47962472482f90997d3a9f9d5d66ed40a07a03368d776ba0391efd69111c636706b144b0fe"
            "be9c4c40e34453cb59f1e85cff0812cd784c0180a060ef5cfed04275d55724081d388b3d36d12e661ea96d3c79"
            "ee92048a4d55b81680808080");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    key = mdbx::slice("0xb468e2fc9424bf8bcf64cc3100123f6ddb417c4678736211d9dc315d0fdae53e");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f90211a0237cf50605b17be42ad83914204158eee344b6c1fb471a7e3bcd6f4ba6c35aa1a0a0e4a692227359be"
            "f80b39a637439a03d4e302fd210cbd64665e7ee2fcd632b1a053bba9baa0b1713099c96329b18843a3f850374c"
            "01a2554279050f0b80e98294a0f41743f078142d3d39b4dd7016fe93ed8a895e46559299b74d97c6bbc82bb67d"
            "a07f6c9db580d115b3039d64e5b3ec919f98c42a59018d67f779f25d735f2ca421a07470dbc6448b2e825ee9ff"
            "ef93c0e28b94ec5d687ed169398ae88d769121dbcba073298a3d4fd2338ed57ee92cb21d8f6292f356b72a9a27"
            "f2ca1a78028ca6bd8ca0c7edaa29b3411e8872b1b487c4163e49942ef079dd8dd6c81588eac8165cb3f1a079a1"
            "4406ddfad2f19f83c7630592502195373c1832d8ccb536ddebe793adda69a0856473f90f8f6522b36d4685d063"
            "206fecb526773998d71f09b2cd5dc7961faea01748b75912e850a866f0add29f38ffa8c82d71cc96d86c546b79"
            "22737a766d89a0eed544b5ffed24e02338f65270fca36488f2974c742eef8247c6e5d521ea2d78a09eb56b4801"
            "44ab26072a6dc13b959715757a4a8e9f6aa5d24fe421c7d22107c7a00418842e60da4bc61b5b6185660b1fa3a9"
            "fce2261335dabe77c0afb70161dd81a0ed9050ae68ec78afccca4a659d7e5bc994a29369ff4860eb48ee7ee22e"
            "bfdde4a0e0535dc0cb928846619a29b7c727e849931f335bc31db9cee08c3bffc5db9d0080");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    key = mdbx::slice("0x9eb56b480144ab26072a6dc13b959715757a4a8e9f6aa5d24fe421c7d22107c7");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f90211a0fe58ebbf1b3967e59caaf962aa5149fc6f73de8824005902d385a0a9f10a7e59a0fcd91bb862a83f1d"
            "6f12a4cf71be5f29374e0eaf93d8c806298d798547fe075fa0dc13694e325490027df153d7d359a57fa4d2e20e"
            "f15473409bc7d44576817dcda019bafe99573a79737dde5053ff11e1a57a5ae46268085203284dcb6b1c81fbdd"
            "a0705fcad76441688d3994f33f9a1695e743c95aa4ac139a933b1d55debb287f22a0047be678b8d6e4540dc37e"
            "192ebfadbfbde5e9a3835d1a8e087429d6455de593a0381005da04cbade0425341aec8032405700d5663602893"
            "3b9e5927c82dd057f6a02d4f457f0039139d7eb41d866e67898be82e8dd9cd7a3a0a3618462cbc5c0a03a0f7c8"
            "67457f99d50f8d92fd2d0e6a5152d0f366cea526b904e3d3b2f8fb7f93eca039463c1c1cb4bbc68ce8669268e3"
            "ec65326e3d6e90cb7b90e54adaf9a5bd5426a028599d49b949a6da964a04db5526be221801a351321e639811f0"
            "7fe9a82534f1a0f29167044da496fc43e735389d45bfb5ae8fa2715847cfd0fd4303a21febfd6fa0673e0bbf4c"
            "c29ea263f8969f13828ee43bf2e58f664f498c3ee10a97a4b29976a0c3f8966e796ba2c994b8995c250ea9a76c"
            "3c252b5ca6284111a9bbd69babcfc2a01caafbe33b5dd92147a30523c42ece802664f72db7cc81be1f6b765ed4"
            "75e960a05b6683eeef3fb246da89e3773d4b2e0c4d65ad9ef5484396918d55372271673a80");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    key = mdbx::slice("0x047be678b8d6e4540dc37e192ebfadbfbde5e9a3835d1a8e087429d6455de593");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f8b1808080a0147106df653127b1633f2192c27b5565c742873a72d8fd4baea5781e06ab949580808080a050bf"
            "8d407a0638955a89b2cb1c0237a0b8e561f9dcab89c638a204a823a23a3f80a01c626bae0d4a3bbc67251b097e"
            "cdc46f099b045d06077ca13c1351feaf21a97480a0569a8ad3fa1f34dcffa2eac7fea3237912372f00a5c9e156"
            "9e0fcafe970a945080a0b4937c33bc00f4b5119a267a02117bafee772f8a08a448b751bf47fae879a4818080");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    key = mdbx::slice("0xb4937c33bc00f4b5119a267a02117bafee772f8a08a448b751bf47fae879a481");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f85180808080a045f97b36dd902edb23c07c25656410f67bda6a7fd8eadb0de59b5d8027d666ba8080808080a0"
            "040a878d39e577a175308d815d07eedb77e3b75c1e5ca7f22ee3cdf3f5d8ba14808080808080");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    key = mdbx::slice("0x45f97b36dd902edb23c07c25656410f67bda6a7fd8eadb0de59b5d8027d666ba");
    if (!state.find(key, false)) {
        value = mdbx::slice(
            "f8729e3236a9a856bf5bed4d5dbd59e1c6194206269ddd1402847d2c38d3721fabb851f84f8240f1898bce2ec2"
            "48cc449cf7a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7"
            "233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470");
        txn.insert(db::open_map(txn, db::table::kPlainState), key, value);
    }
    insert_on_overlay_db(odb);
}

void insert_on_overlay_db(db::OverlayDB& odb) {
    auto valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0022dc658c54335e88a66f7366bf842eb4c55f7e24da8c80c08d370ef98fb8e00a07c806b5cc362296990599673685cdf3a2b5a"
        "80c7a67e4301ab1eb135f1f1ad52a0f29bef756e86fb26542808b8950c0899355a20bd6d951f38853dcdbe53b63588a00b8303ac672bc3"
        "f1028ada52e9582108535d0ad766ffa0e969b496428f900f44a0c4423b2e0efd9464cbd84ecb87c57298dc616e08d01ece2ccc745b148a"
        "dd51eba038ed9c5ceb8b929ad261fdba0a9b450df84caff15e9a10643ff8313984cde8a5a07ccec3cbb84089c42eb931cf2da729a3a4ce"
        "50e2d1df835731cb0b4bfadcd6e3a054f0d861ac7cd107c685aa603cfb00c5b69bd0ad9c0ca7135f4f72af272334aba031c8e57305df91"
        "13465f1775b6f3feeb4f73b3af353ad1bed5f9300837f8e549a0267376fca76e075f82388eeb2b87e1fdb251b4c603d5583c63e7ec4323"
        "af0bd4a010fc43dc263282e53c45b3029df85171beda7d98c4d9d8e6f93464938ca6303da0a3eab43b3eaf614d5ded6f0e8b153f9bf71f"
        "001cb33f88f31a86a900e334f2f6a05ac09bb25d23cbed6e8f7439996a99095561bfe0f3dd37307cde0b540aa153b9a01eb80138a163e2"
        "9874e560b06be8e6e10d7b1f64bac73a82156caa967a5aaaf9a01b9500e133646edc6ead52ba92c6bc4c096f2a876db646d5d0ca1237d9"
        "9ab736a0452a655c6f5da7488ab53f9d13de5cca30150ef2ee2e3ea9294d6fa564db62b280");
    odb.insert(h256{"0xf1da69409a52822fb0e3f78c0ea402181abdb603d840703e4bf8c12370ec6643"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0f783de3bc9b4b457f8d0a3d258a34063dcaf2f67bfa57d6cdd3b2655e9271a9da0307710d65e30277fe37d52206ceea5b9706a"
        "f07fe5bd773fb7e8739eb9816e39a000dce9dd749a8219d3d3735a53a9cc76f6b0c16e332056fa92c9a57293da4c36a005edc1fe3922fd"
        "1ed265f0f102500c4352435b2d144ad27831498687b16a9ae6a0f19c4a4bf18b498052d073ae602cb2145abdc76f5706d05353359e0700"
        "989c18a039ccb9315774b395472f8ec6caba33633b7308c0aeeac3a77e55f053b225a6d1a08c64dcc7d64bd058c6f03c5b5b06533872a8"
        "537783f5b1d13e9edd339aa61697a0fe2a1343d502ecc6bf254d8854c5e39d67616f18bfb1e61630930e9e65f347efa06e9d3210ce48ed"
        "67419d7c1505dee32984b141ae708daad7d8efdc282af85df7a0465fa9ca5a76e573de50062e3778bc69f81f90154829694f50baa2576c"
        "5cf9bca054a7ba7b3d4259e732f874e3e3d34ec66d1f152b1ebca797f9713f750b26c3eaa06f6253af13b746ffbd6538d44efb18d30830"
        "5f84ca0a4adb6146dd8c2149a5c6a0aec4de626176d8e731ee83ce3773fd796b8e98a5004e2aa68201e783a7338d66a0b15df79752d604"
        "178914cf0e16b8331cc19e0bd76a381a24c1486b7e306b1f89a0dfa8c08348d60eccb4e46a32dc1ff337f0ed5da51b5a1bc828d72216d2"
        "789043a071766127b0819b61f134e986bb8f9687d681f2c267bc7f9f6ad21baa41b9e4ae80");
    odb.insert(silkworm::db::h256{"0xc4423b2e0efd9464cbd84ecb87c57298dc616e08d01ece2ccc745b148add51eb"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0108a76dfd9e129e5b1210827e939d597f5e04f5be44a1a048351c8325b06a89fa01d653c8b65589804739c7f2be2b388e06a9d"
        "4bcd3b41f3592a9b2f9c3eda058ba00949f379530d50463ee6f68f240543bc98a6f51a8e879056b63f0ad1f5269f15a015b1f930765dde"
        "3b34209fb2b42cb6523cb1ff36c57342a50c2b70a4e2161e76a0c9f42eae038555cd65566aefa066d65fb75332a7271bfa6ac20b0b32f1"
        "9d508fa0754a522aa7ceedc55994501e87172d94cd94662c211f054bada33eb187e5c4b6a0c6c308d5e9016440e762370e903802caaad6"
        "2521abfe0eedbeb6ee1d00f0e47ba0d7aac4d7cabda2e00a2e6a2d9ee257fb5c995a861c6e832eea86997815a6a443a05c33a516e4a6e5"
        "2686ddb3a218f1d2478d67974482c178cb7aaa9bb360e3a250a037fcf78420c81c4db6ab147afac25622bed85e8fe870e89d4bd61245a2"
        "8cfb38a00e1bab6f732c174ef477fc61eaf6a9b8bf9af195261bec71cb4768af668be0e8a0ccf722047ae92d774555c8dba212d9a89682"
        "5257786e2be58d5f3a09c932f87aa03e667b60480b94df841289ffcecaccf8982ab1da679d494da67c6b991a4a8bc8a05fe9cb0db20859"
        "d68de48597b410c709d9ec4d6b3a309f72b0f149874c604fd2a093e0000a17d5eef8c7449934e76801bb90f75d2fad0b615498b3435e26"
        "dc6e95a070ebdd328801b0de3ce3b8fa1b99b3b8fa59b1cfcca948a24a78a7584be69d7880");
    odb.insert(h256{"0x00dce9dd749a8219d3d3735a53a9cc76f6b0c16e332056fa92c9a57293da4c36"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f8d180a021737dd3266f379a478ac9f1e6899ea09027566341a4016cd944d95aae9e0bd880a06fffe1f83cd2e295f38a539ae557aa66d1"
        "e9acb6945fabf65c9816c2d61f308c808080a0110f708117b588cda30d6d5aba0ebe5daac383c1fa10b5ed3c833814d0f91115808080a0"
        "aab081acf4a18d888c181314f11c3c44f52a335025f95a04e039fddb636e12aca0b18e6b97ef88b6adf7ac8d31b36c42b95502d7c6b995"
        "f5012a83ec211a891b71a02de3c24dfb35f735349d059217f4625cdacc16abe90efe9a4a6a507aaf0a013c808080");
    odb.insert(h256{"0x37fcf78420c81c4db6ab147afac25622bed85e8fe870e89d4bd61245a28cfb38"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f851808080808080808080a0419a2a04ae8a9150e53bc095e21babb16e986841504151f19ea02c24aa6665bc80a01d71c1f95a7791a391"
        "7af503b788e079cdbde33d940db6cf8cf67e1d23c794708080808080");
    odb.insert(h256{"0x110f708117b588cda30d6d5aba0ebe5daac383c1fa10b5ed3c833814d0f91115"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f8709e3dbb30c27553475499211e1f5e402b1b6cb2425377f42e80098238108d3fb84ff84d81e8880746cf5182b425c0a056e81f171bcc"
        "55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad804"
        "5d85a470");
    odb.insert(h256{"0x1d71c1f95a7791a3917af503b788e079cdbde33d940db6cf8cf67e1d23c79470"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a050d7e471339d8f8bc2082d46e5c8808dbe1e6dbb61b57d2a09cb5056293d77d5a00b779aaa7a3fac75c67d132b73c9184837bb"
        "87b2e3d887efc269989d9de1be15a00b03e5864f165e879fe19fdf22b2aef6c995ff5f04f9c813f276ae363f7831c6a031660f9b35b2bd"
        "ab60e49d759004e456b4b4785dd38bdb1b4329917703839e8da0e18d01ba54c03c39b54780ddfab5c8d857f45d6684386d8d75a92b9948"
        "96c0c1a02a72e07a86dffbf6f6e30b445ca30ddc0090e57a9c969e08ced974ac9e8f3d9aa038142e7861627fc322ec200931635ace2c0f"
        "5a6b76422f9da933684f9528b1f7a014683b97f3c4bf02e4af6e14367d728461a33d6b7f22ef4434721017f9b7732aa0a8fb7e76b8d5a8"
        "930c898dce2b934d7553a23c5e875070d27b98c37cab8ec831a088399ca8aa817c26b17050012b8c430e97ea738a46b7153c5ec23b9b62"
        "5453d1a06a2cfffba8e0cfa2e29f0d69ca62a13e04aad7490f10785f6db55faeaefbd8daa03c281991487b424716cf4e1af3bc39dd5c92"
        "ebdf908f647b0bf5da72f9106bb7a0c05263a10c6a5b6be99e1cebccb86bd77d77af8ee0ecc2ea619d16e9179d74eca0675f5cbdb7bc39"
        "2dfbbbb00f68cf8622e26f1792bd79bf54dbbb71d2406b3567a00eb6bea6903a682642391ae4ed538e5d0a47a1b44340fac29163971045"
        "4ebb16a02927f4b3f095b6b94c560cda33906aad9739738fdd8b7d25df03bf0ed7b0e8f880");
    odb.insert(h256{"0x452a655c6f5da7488ab53f9d13de5cca30150ef2ee2e3ea9294d6fa564db62b2"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0022f94fbe307cbb1e956286f7486e96f668a040b618df1b35b3f1b89e79ae622a059b2fc74bd52575cbf35230aaab03c8c2f55"
        "3f80a81a8982ded179c31c57ab82a0e3e221863f48013fcd56b216fbbb531d7918a6617e78bfe9225524b366cb692ca093c9851aab8a95"
        "73f6622fc9881a91235771940050dbfb0e36df41e858aebf01a0b05fe8eb595517f459ac316e552ef3cb687c4607369b5066bb6f199e0e"
        "a6cf05a0427e40d6e6955dc4e05f009365a06287cf64a87dc55d3105d3cde13ec8126f6ea07797d30d4984a438e844c3b0023c5d5e19ab"
        "a8c8eaefa43e549f5ab17c893635a0378b21ea81042c2e6e1d9bc02ab4b1c43bde3acade9ccfe93847d17bb6f90ffca0ad018679228e83"
        "ada58d378e4371ac2266f6301fe35cb6f50809cffcfc7a1970a0e65efbcba2105e2c5803d7e611df4f55a488bddb0be57b921d3ceb8b8b"
        "5f9293a00c8b2a4135ce9d24a93af5d67f321f0a133c180ae57a203bcacbc26e8bdbc7e2a0327c28af7ddc04f81cf79d75418e3c6a5948"
        "d0650c0881863000071372c95f7ca09671d2eac9122df79d1423f7cb5f65c7d2fba3b9cf7cc11e05b4c92a6f80698da0c658bcafc8219b"
        "1f779e4f287ad62eabf99cecf2e182d4e1a18ecf5bfaaab026a0093b6aefc3c9c918e18518dd58aa912fac2a671393d4f3154f96de757c"
        "0ae7d5a0bd3e06615dce439278e724f20623c80f8db7ecd9eaa5f4d64e2f10bca6b79d8480");
    odb.insert(h256{"0x2927f4b3f095b6b94c560cda33906aad9739738fdd8b7d25df03bf0ed7b0e8f8"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f89180a05587725cb2fcc223d2ec8a0050391622bc117ca1b828e69e91682bb234d04a24808080a052d48d039cd22098486c71eb95f965"
        "6d8369d9c506ca47c4bcedc1e9d554aad1a0ba4ba8e064b1fc2273267fd1942f211233edd61388c6c5644d561dd0f2a491518080808080"
        "808080a010d3c12c3e1efce1c97c3530a568ebfb38479624a66e6f8cab462b9a90b0b43480");
    odb.insert(h256{"0x59b2fc74bd52575cbf35230aaab03c8c2f553f80a81a8982ded179c31c57ab82"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f8749f209f05d2dac481a991ac6466e42d76cfcbfe9d59681d3f255cc95c3b87cbe0b852f8508210108a1749dd67aa0e27357838a056e8"
        "1f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b"
        "7bfad8045d85a470");
    odb.insert(h256{"0x52d48d039cd22098486c71eb95f9656d8369d9c506ca47c4bcedc1e9d554aad1"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0bc2f72c8987a2920ed00c50876adb90165b629eb55d42e827a3b21f1f588b1a4a0e32938a4aa3d516a8f94084cc99ca3ae6e13"
        "bddc85f801daa361fefe2316b6cfa05229e0dd6204f7f78ab989f646f3c62143c1069922357960c4b93f941ac26dffa0359c0beff5223f"
        "28bcaa8c3878c6ab10fe009f2abf03e26839ed027992a493e7a0d99f1fc37b3bbc9ce5cee9e7b58980f16a8ba65081424a9813def6ac2b"
        "627e17a09527f1596bf8661bbb9dce37acbc17cfe517fd76cb09ab9644ee31a32f0416c1a027c748ce47431cfbbf082fc8e92a61a466d3"
        "4c6a57f76197822f0864e09fdee4a010c5d2c19cbe0d65d35c83181df3824e61957812e86648bce9c44b41df35c4a0a0172f82a6366385"
        "575071051de939c8bd452c9cd99aa9ed70b26e0fbb82521caca040e5c285f9aadd795550d1c0ed81867c9de9cf5e36df10efac86d702f8"
        "8dc526a0b23a27e1c6d20cd2e02bc4ab61c988db4f482f4554952637c266aa84045703d4a027a4753beb343c0a8047165d50b8353471c3"
        "10c8388772edef15ca38f00cf57aa037c012e236a0d44b25548c638a85c274e4ef3945d9401721e1d0d00f6869a47fa0b7c7afad70e4be"
        "73f6e4e6cc3a68b2b4c0ccfad06665767590165cc21df3201ea0e67a01f4eae366f378323ad2fc8953f45c3e5f29ad12a6dcd39b55807a"
        "c0592da008d776bd8c198cbc1ed88d13a247a3096cb667653c9d12432170089d5d2e3a9d80");
    odb.insert(h256{"0x38ed9c5ceb8b929ad261fdba0a9b450df84caff15e9a10643ff8313984cde8a5"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0fe58ebbf1b3967e59caaf962aa5149fc6f73de8824005902d385a0a9f10a7e59a0b71a31e578d9b72ca63e60c4464f1f928b7d"
        "ef77b07af99815d80d6948feedf4a0d2bb428a5f97b141a41249f7be4a20b9e36978191ecf9798c16b40ecd8600140a0bbce24ae49fbbd"
        "2d4d165b5c0188964355e1df541410703be78579df6171c7b7a07aa84792741c58c2cf958339af78c4af6431a648641864d07dde8a97fc"
        "0e708fa06c99a2df8e197a2c2bde480bc8d5703698a9b87e9cb9d5a16337c21251dfa989a00ad1a6cad5db9a15b0c6f95d59c931e31f2c"
        "b1bb50a277668ed9b42f6a301f89a00a003099c320f0b37a612b5ddbf88e00c5caed4fccdb36732525a03accf30d94a0f7c867457f99d5"
        "0f8d92fd2d0e6a5152d0f366cea526b904e3d3b2f8fb7f93eca0c020cdc46e54487c265b3b629b24022065f30c1be0def90848b7676c29"
        "26aee8a06e1b3bd001793b69245d10fd2df37c90494415ad0675850b74ef8bc0b0e350f3a04102e88b0f95144e626dccc74bac11367daa"
        "628dfe6f077e3c5462cb8969f8faa075b5a3b8652f4d2d28c95484c3825864e145f0472ff023fa11a049b6990ddc21a0475d91981f1ecd"
        "fc3e48f83874c4ef9e03215f4568eec4ee470716f3d2efc958a0f98915da21921b0c91a728b30e175b035d678f426ad23b746c6ef344dd"
        "31f079a06463f10a53444c72b943c0d88dd8fd1f4e1a56cf2b38307778701d3463430ac480");
    odb.insert(h256{"0x37c012e236a0d44b25548c638a85c274e4ef3945d9401721e1d0d00f6869a47f"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f8b1808080a0147106df653127b1633f2192c27b5565c742873a72d8fd4baea5781e06ab949580808080a050bf8d407a0638955a89b2cb"
        "1c0237a0b8e561f9dcab89c638a204a823a23a3f80a0e0021423ef5fb37d686ab6bb50f55fca1aa1e00efc1e5ed1263f0b0c993d3a2a80"
        "a0569a8ad3fa1f34dcffa2eac7fea3237912372f00a5c9e1569e0fcafe970a945080a0a8e072c174a961519091322cc9234d3ef8f3c435"
        "a8a3f4053199d3d8fb299bdb8080");
    odb.insert(h256{"0x6c99a2df8e197a2c2bde480bc8d5703698a9b87e9cb9d5a16337c21251dfa989"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f85180808080a0d61c1bed719cf56c1bbf440311fdfc8db472af9375c9574326a364ea0fb585a98080808080a0040a878d39e577a17530"
        "8d815d07eedb77e3b75c1e5ca7f22ee3cdf3f5d8ba14808080808080");
    odb.insert(h256{"0xa8e072c174a961519091322cc9234d3ef8f3c435a8a3f4053199d3d8fb299bdb"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f8729e3236a9a856bf5bed4d5dbd59e1c6194206269ddd1402847d2c38d3721fabb851f84f829d2289b73781c6408f4ece85a056e81f17"
        "1bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfa"
        "d8045d85a470");
    odb.insert(h256{"0xd61c1bed719cf56c1bbf440311fdfc8db472af9375c9574326a364ea0fb585a9"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0f509295a5f60cc9fbc42d6eae8cd4ed2cbf4be5fde0dbf8fd36d79aabd873192a0fd93422448ee0108603534321f5960a6f584"
        "4bdfaf9d47fa24509fb955c3f6bfa00dc462188d4843070fce2d05afb0e5e3fb4250e4c001faccaa4cb3996d11c61ba01c5bafdc0a5518"
        "4d8bed3f1c2a8418a41f2e9a6c2926e8dbf5fd93aa16bfdee1a06a584e2e61061f0e6194349a88c8c1a1cbcc0ebdaa012a220c64768ccd"
        "f61d87a029158eaafb0d0cd222862afe430fabe501bbf9f28b29e98a7637c9c301b0f757a007291bf99bddb354731995de6825719b323d"
        "b9c4b562d540429d064164a2b01aa0b91081480b4a4dc3188f6dd7196111dc3b7c1ea5f34adc4e56cf7644eaac4feca08f3e00754b7b30"
        "320b76f7ce0e6209306e74587a55c60d044f3a855c0942bdf8a013c5d8d7685e8cba5c9a3601e52f6ca8476bc952db7f9add8d2e0265a8"
        "094ebca09e2862bd1eded0b95f38a4117c55c1b6f2fc6483261e65c24173f9aaa1c7d281a0c547fdb2f6a1eacf11ab3308b1cd23a6bffa"
        "1c4c7055a4716cf665cba803f4caa081c5f9dd20462ef42a3a751d244b23d5384400ab90213ea3938f71a85c135bcfa075895e6792464d"
        "d0cb2a6244c85d037df8f97d6c9a5b5f4ac488cee3fccb593aa0ce25bb05a54fb7caf6e0e735a8dc652b71217696453241fb6c3f9888f9"
        "a466a5a06e9ca2ce6467d955b847219c2faee6e7f98c72d46c07d520f782178788a9a86880");
    odb.insert(h256{"0x1eb80138a163e29874e560b06be8e6e10d7b1f64bac73a82156caa967a5aaaf9"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a04f43e22a8206ccced30804b67962dbf749457b5b29f0bafdf27c81234a6e4f81a01e240f96a4ebe85252bfb1cae8875e301a0c"
        "b1c253d619f65248e82b023385c6a0fbeff8b9cdbd8d9fd28b934790e0c0dc99ed32719c081124057f9f3391558196a009839d2ffc3398"
        "5b1fe541ba295ba7e5337f3a41a5df4dae45bf672bf1fc9a82a084499c3ddabfb990874574b17185ddc0988e163459cc1ec7a547272cca"
        "3b44d0a0e04b07b74fce1fead4da782cdcf1a4d0e0304942acd1b68179211a5ee254fe20a0fe0becedde074416d11a167d623e34f6a516"
        "67e1a6ceb97926b4da0129ca1c5ca0e0321b9c0b57ae8c785e598ddcc2d2eccb8f7fd14b28f2b898422505d02a5e03a0f05af8796d37d8"
        "92cad3c86b33a11e731e0635c2ec7ae925987f17ac2acfc5e8a076f6c4da12bb87ae24969672d94bd5716a86028f96310f15af061809a0"
        "b4b190a03c5586d61ebde996e7dbad825be0cfd8b03e19c3c759ab1899ecb1dab380575aa0212889a097e123b7f81ea1dfb055ca2ef603"
        "b8fa726de159839a7e7d53da7c35a0a34aaf8f935a6b51c269ef985324869f6d5d18124a811b7145c7f4e99dadc265a0403cdb07f4ae69"
        "6143cb59619040bb9f520442c6d99df1f5b6bfc1125ebbf3b8a0db2bc1ff9380d734217e2b1317630cc2431f4dd7d5d166eca2feaa29ab"
        "a880e3a0fd10b75c2be9ea761abc7b4b1234a9fc87b133d1f8f9e3a90131a4376eb0de2e80");
    odb.insert(h256{"0x6e9ca2ce6467d955b847219c2faee6e7f98c72d46c07d520f782178788a9a868"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f871808080a039e5ba0c69b9fa88c008cfec6805620e3e28a6a4397bb5826f9a0acdcf907052a081d7446fab142ff8666cc72142ec5524"
        "a71aace75149e8a299efde5457cae74f808080808080808080a09e8e1be893e7c01f5e5be41deb373c687d0944ad91398d2a68f1ba4c10"
        "4bc1f38080");
    odb.insert(h256{"0xa34aaf8f935a6b51c269ef985324869f6d5d18124a811b7145c7f4e99dadc265"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f85180808080a091e919ec7e0d826bef4ec104d834138cb4f6892fc4292dd391eec68f2c3828e3a080250f3bd29aa3fb73684173505d4d"
        "5fa681d4e0117379345ada99eb35dba7c58080808080808080808080");
    odb.insert(h256{"0x81d7446fab142ff8666cc72142ec5524a71aace75149e8a299efde5457cae74f"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f8719e35be01185e0671aaadd758b2803124b5efbf314cb3aa115f86d72b51dd22b850f84e82110c880171ed227221d703a056e81f171b"
        "cc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8"
        "045d85a470");
    odb.insert(h256{"0x91e919ec7e0d826bef4ec104d834138cb4f6892fc4292dd391eec68f2c3828e3"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0f9320540edf944a408f3f915dc1a7658b642537f1f33b8117073ce7360250006a0bb449f92bafc44ad98e191bb88c4214a2ddf"
        "a6bca05f516d9f8163f4127bc6d8a054b996b7e37e97fe9bff11c2ed362741dc98b7db0ca35ab3792275c69a42a496a0cd05b15b306aa3"
        "c3b73be03ebcbc7cd9455a36838eabed25d64a12e453304474a0d9ba211acb3516b865bf04f56c449c86f721cde4a1414e9784aa2f9f6e"
        "6d8d64a0e7c19d6e893cc8c3ce9e3885edde0cc0d9782aa3b7d4cf959a49280f6bc96424a0cdb5e185c16049a359c110c5a8d57c4fdbb7"
        "1d9eeba5e8d13fc8255984d519a7a026dcce1ae2ad3c0252df4411ee0fafa2754cd4c6a019eb6fe92664b124c11009a0103c4188718d05"
        "a24df4ee72edf37f6951cf4e98eb0993db4937e0211d97741da0c8b5ce69f26850696bd8eca2c885e92d298130ff3f532f41f1910177fa"
        "727b67a01cd01e238d680124d0295b83e7d693c1a3f5302007ae7ccf3b97752d951be004a0064eb3519a32dabd2839b2dc8c6f1dee0c87"
        "959724fa24273655abd66364f51ca0772635d46262c4f6aec181b4b00c55a2c30ffad64ae3372a3ca69fbbb72d3cd0a091e2e08d128a07"
        "880ad8a9cb0b65ae010f45dcec64e1e9d5e50489d3868091bba004440f32b7a320e1b682ede1caf2a72480121ba0a47333de149843ab14"
        "776df7a0fe5fef759a0841f7e14f049ebabe744552676a6d2c0efd86a1719bf52f4c744c80");
    odb.insert(h256{"0xf509295a5f60cc9fbc42d6eae8cd4ed2cbf4be5fde0dbf8fd36d79aabd873192"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f8f1a019acb51587e61e97a39d8d3184a129bcb7a557654dae058c4b255450771b46cd8080a068aaa970a24334ba2b57a39655f53e0c05"
        "da4648487319757e9ae6feda247760a0439c3a137a6e37711aef21f682c8a8124b67fc32f7e313899a359fa1c90bc4a18080a0724d6462"
        "d0e2c715af091a8fd957347f4581ee9cb6f103a14dcdedafda5d587980a0839e1c96b64889f97622a45c9e42072fbdf0a482745f30c3eb"
        "4b0497b2e4c25aa03339fbca1d9ffa5a7326a8b68fe7f60934328914a62c92a64965af46b7e96f7180808080a0353ba91bf038fa266b62"
        "ab964f80b1287341785ea40b56e95b6617b222518f2680");
    odb.insert(h256{"0x103c4188718d05a24df4ee72edf37f6951cf4e98eb0993db4937e0211d97741d"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f8729f20f5fddcecd74cc0a76daa84d106c71223e4039b6352264a8b082b0fdb50f0b850f84e8202be88e3ddd1dc7605d980a056e81f17"
        "1bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfa"
        "d8045d85a470");
    odb.insert(h256{"0x439c3a137a6e37711aef21f682c8a8124b67fc32f7e313899a359fa1c90bc4a1"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0623157deb5086a660c8b03f03a7ae60079777943dbddb6cc0842fa233036258ea0c5f46e08fa9fd5c4d4f8593a51bde353a214"
        "e62fc18bb2a7595033cfc6a3a453a0c9308508ece8c220a1e3c02cd74b0d76ca3ffafb54cfa6a0d7178daa4ecc0d67a08a8f2efebc3621"
        "6ac88ed169ff639151d2253a4755a997b8b8bba5c38bce3915a0ddf961604c9410f5cbf99d4d2559478f9897aa62125f05ecd40783c549"
        "f8707ba0506aed230de8b97c7a9bc316ecc11f75edb4d1221176cff8ac08774144b0a2e3a022a6d5d14eb4d00ad9c06c824cdc838f2087"
        "b114f7f6dc2386846e813000ca06a04515d07005a36935f0e197d3516840014e01f67c96242d7c65a4fffd5393870ea0b1a4b377b19a6b"
        "6fd726a865d0735e2c0b099357d9da7e6bea4103e55a418ab7a010b59e3a9ef40aa1bce479bc4153c98291cc2ff75c82b83ea9096fd77b"
        "13cb29a0c60007345033060fa50bc1bbc713c2a5da09da558723347935456d1fc597e047a07185c38b4dd16ba225a9285373cda69e8128"
        "95925d804ac02d30168d52156eeea003b854a902b87fb133adecc3c63c3aefc39dfe6dc71dc3d868adf564acb47065a007b96f91e0414a"
        "1b18ff7642691febea3dd4e18a568290e6d065e868d4d24352a08221447bdfd54e1da42d28c14367ee5634f9be8bc08575c186a29a2995"
        "a4c47aa0727501c35593b0f1c37af566226dde0e5bbd2df01a77579a6f538baec6fc77d180");
    odb.insert(h256{"0x267376fca76e075f82388eeb2b87e1fdb251b4c603d5583c63e7ec4323af0bd4"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0bd84eba6b7d2632e53140b6ea8b63b60ba7d542f47b262a052d782b2255b8e98a09921d77b369d8cdc6577e3bf941fc4b56e4a"
        "938962b5c01543670c4e9309ed31a05106bd6d86cdfb1a4a672526e0d8a383ff6740abc15f1714b6581c02d37a73baa06632979289a634"
        "352d1d2217d3701b1d8f03e05e136cbfd456600ab1a0995775a0f38a9f6cced7130adc01132bdf462a02aaa6c19ef1ec39c44887054764"
        "b45650a0741e07f0e9731f9a2aad117109f9a5c3f0dd5be72d085869f79fa6952b22e3e1a0ecc67855985fa3ec2d443f5a23abbe864e85"
        "90e2ee84b6ae5786f1d321c6493aa06d6a07dd2e858c784274acf44a4649b56004ae345a7087aec22871df168cc437a07e1dd03e5d0798"
        "77a61494cad523e0f03b8da32a39d007bbb0b025dda20aecaaa02dff8d73e90286f3863bc8d22476b196e16fba5e45717034b9a473e8f9"
        "f031dea0a9d8ed412070ec8facfbc75c0b2e95d2d9379873d0423918c736a4cdb9bd40e6a0369a4b15b32e8bbaddea8fa71da0c2d5ab1c"
        "0de881673f739c9bf636e7296ca5a04c98bb4cc0d6b1c0560d0fbe43bf9cd487d857b3d80de585b400bfab12f5cd14a0d04afcf8ece2bd"
        "4deefc27267e36886d87a5918adb4d26ff046c84aadf5629f5a0bc4724ae2b01ad78415ef827c54e522dc150ca805d6a012edfd9be0ac5"
        "1e57c2a07b03bdf45dc1a3385e5ed2ccf9e03a6b8881de80c766f857a31035a1901c09c380");
    odb.insert(h256{"0x8221447bdfd54e1da42d28c14367ee5634f9be8bc08575c186a29a2995a4c47a"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90131a0f556a0803e39f67ad4333bbcf8bdedad99cf7ff71e8f8d206884ced51c56c22c808080a0eeb8a6fc80c691f7720fc6f0004b14"
        "9b042e4a80a81fdd5a6ef69cb0c10f8c3980a04da6760b2eb7ad5413bbe4f6f572966044517f7349263ad9104fbace3c9fe735a00361d7"
        "73fda06df04b092fad2d254f677ee29f5d558c7543a7d5ccecfc8b99038080a0624bea114ec9dc6fb69ccdd9e0592bd59adfe6bac079ba"
        "6d6e47172dec79c040a030b5b4a7aebc711e05af407648012c0e1277c0f2ba7320f2127f36ee20906a8da0e7e2319d14b931daeba0e54c"
        "fdcb605bf1b6e8e2796a52ea50d51b6a439201ada04756de48375c073fb25e82a505af1926f98e4a9d48ab074cc676475d4903a26880a0"
        "4b811d6f4e08912f2155018509e9bbc3f830254ca6e7cde9813a61443a88058580");
    odb.insert(h256{"0xbc4724ae2b01ad78415ef827c54e522dc150ca805d6a012edfd9be0ac51e57c2"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f8729f2062ee31de9e22a40a72cf987a663e06307f3bc5adafd4a4da51178cfa5607b850f84e8201a8880ed627ceeefdfeaea056e81f17"
        "1bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfa"
        "d8045d85a470");
    odb.insert(h256{"0x4da6760b2eb7ad5413bbe4f6f572966044517f7349263ad9104fbace3c9fe735"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0289b6351b687481f59e435d4bba33a7cad8bb7fad7720ef319d77f3413d99509a0cae9cebafbca49c40756521af74efe7a32b9"
        "7d7949580f656891007f6714222fa02a3fb83104fcb5c0a66d1231d59ccf44ac3ff77d7002d54b1855d7c71742c248a06a69bec7a56486"
        "b9866a013fa286ad1c8b40532ef4f56f3f1fe27a456c8d4172a02aba304c4c99289bb0f977883b69fff66fad925bc4b8e1accd524e32d8"
        "d2a35da0a434ffd4298dae27a061276faf5156ce982d2e57a72e1c0b71f24698cc96cbaea0a9183d821f3aab6e12e52de249bd85faed67"
        "7a12016e4f1eaf3b8d55e08d92a8a00157a8550898857e8bce91a9d0e1450ee281adf1f3a560fd090690df35b3da72a0fb97fcc5a8ad74"
        "c0720bd3dba949908740712318be608691f4dafc9bca8904c9a01b80d074254ec275531626070bef4a426ee743991266e134d2dc4c5be1"
        "5b6885a058389fd6a9c8411b4aabee914a0db8c2ccb12f2fa5d86124acf162a196c34be5a098110c69a4fe2d869c25ba577f4c630db4ea"
        "f129f4e4ead5516f32f4788d90a4a0056ad215ee5a7d1f3a9a898e96f9b7c8cee0c39063fe22e64a1a0e668f1dde4ba0537e8ff6d2a7a8"
        "ff3b1cbc6baeb80ac0ea0cfad64463b8668520d7eba94ad53aa00cf71a312921314e9de5fff29d5c0e65e4c0b3e97f7e44f3d3d90493e6"
        "71fce2a0037dd8348932ad1f4d95d55de98e3b208f3fd194c5c6088fca31a91cfb1260b680");
    odb.insert(h256{"0x14683b97f3c4bf02e4af6e14367d728461a33d6b7f22ef4434721017f9b7732a"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f8b1a0b0682f9b3ea9e8327f1ec955f5ba86e00f0db1e3b83a3962d2972914aef8521780808080a07a8e44fcffe4ca7e6f523ac89a8189"
        "b90f64a91e2e0d4e4d8e14376b670aa0ee8080a06087a1ca0413e566f6dd0b4628f484daca1b1d7d539c59b8af7a61718aad9629808080"
        "a07a17b007a798ca61a4b5e3b650fef00765a991c436deac03b7f3cd6c5b744b9d8080a064bd4181386fd6c3150d96b9635776addb240b"
        "68fb8ca20af9cab534bb8731c780");
    odb.insert(h256{"0x037dd8348932ad1f4d95d55de98e3b208f3fd194c5c6088fca31a91cfb1260b6"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f85180808080808080808080a0e2d58864054dc6d9371af86ee464487f85b9d70e5a778d2ddb29b0bd4335073c80a04ba2c50578e7a083"
        "b798cf87cecdf264a65a6d6abb676b4885cdf5a0103e088580808080");
    odb.insert(h256{"0x7a17b007a798ca61a4b5e3b650fef00765a991c436deac03b7f3cd6c5b744b9d"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f8709e3ea685c798a83da6262b5f64c480b4a5927a16d1443475a1741ce0131de0b84ff84d0c8912aad10a83aee391f0a056e81f171bcc"
        "55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad804"
        "5d85a470");
    odb.insert(h256{"0xe2d58864054dc6d9371af86ee464487f85b9d70e5a778d2ddb29b0bd4335073c"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0022dc658c54335e88a66f7366bf842eb4c55f7e24da8c80c08d370ef98fb8e00a07c806b5cc362296990599673685cdf3a2b5a"
        "80c7a67e4301ab1eb135f1f1ad52a0f29bef756e86fb26542808b8950c0899355a20bd6d951f38853dcdbe53b63588a00b8303ac672bc3"
        "f1028ada52e9582108535d0ad766ffa0e969b496428f900f44a0fe483b641617431d2441341eafea5545d81a3fb463c83b4978a1c67892"
        "243567a0685664df218ce8c1cba62e8aeac0d272c79f77dbed5ecfb0552fe4f658f1a0a9a07ccec3cbb84089c42eb931cf2da729a3a4ce"
        "50e2d1df835731cb0b4bfadcd6e3a054f0d861ac7cd107c685aa603cfb00c5b69bd0ad9c0ca7135f4f72af272334aba031c8e57305df91"
        "13465f1775b6f3feeb4f73b3af353ad1bed5f9300837f8e549a00893d44641b8d95dd0f28d045245a97efa426fc501531ea240fd833743"
        "99ebaca010fc43dc263282e53c45b3029df85171beda7d98c4d9d8e6f93464938ca6303da0a3eab43b3eaf614d5ded6f0e8b153f9bf71f"
        "001cb33f88f31a86a900e334f2f6a05ac09bb25d23cbed6e8f7439996a99095561bfe0f3dd37307cde0b540aa153b9a035dcaa3cea0d3f"
        "ff2bca5a11a1dd0dd4196082c16c2331a82c0c2807ded23caba01b9500e133646edc6ead52ba92c6bc4c096f2a876db646d5d0ca1237d9"
        "9ab736a02b112d35e076360470b8edc07e31b1e650eaa13c2868a64d2400c86946473eab80");
    odb.insert(h256{"0x9049accfd3432fa0c2ad524c407b0452d8c0eb007fb4de79b360794ccabe2210"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a050d7e471339d8f8bc2082d46e5c8808dbe1e6dbb61b57d2a09cb5056293d77d5a00b779aaa7a3fac75c67d132b73c9184837bb"
        "87b2e3d887efc269989d9de1be15a00b03e5864f165e879fe19fdf22b2aef6c995ff5f04f9c813f276ae363f7831c6a031660f9b35b2bd"
        "ab60e49d759004e456b4b4785dd38bdb1b4329917703839e8da0e18d01ba54c03c39b54780ddfab5c8d857f45d6684386d8d75a92b9948"
        "96c0c1a02a72e07a86dffbf6f6e30b445ca30ddc0090e57a9c969e08ced974ac9e8f3d9aa038142e7861627fc322ec200931635ace2c0f"
        "5a6b76422f9da933684f9528b1f7a0e0b637a8453afa41f5e52d1a216e631d54abea73f6cef7adbde483a8b736bcf9a0a8fb7e76b8d5a8"
        "930c898dce2b934d7553a23c5e875070d27b98c37cab8ec831a088399ca8aa817c26b17050012b8c430e97ea738a46b7153c5ec23b9b62"
        "5453d1a06a2cfffba8e0cfa2e29f0d69ca62a13e04aad7490f10785f6db55faeaefbd8daa03c281991487b424716cf4e1af3bc39dd5c92"
        "ebdf908f647b0bf5da72f9106bb7a0c05263a10c6a5b6be99e1cebccb86bd77d77af8ee0ecc2ea619d16e9179d74eca0675f5cbdb7bc39"
        "2dfbbbb00f68cf8622e26f1792bd79bf54dbbb71d2406b3567a00eb6bea6903a682642391ae4ed538e5d0a47a1b44340fac29163971045"
        "4ebb16a052f3c28f7cf697e29c856e28af0f0d8897d037fa654dd6f8ef40b5ae2c06358080");
    odb.insert(h256{"0x2b112d35e076360470b8edc07e31b1e650eaa13c2868a64d2400c86946473eab"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f90211a0022f94fbe307cbb1e956286f7486e96f668a040b618df1b35b3f1b89e79ae622a01066914f3c68c80fa50c85129d4093a354b3"
        "749c343871e17ca4ab349fea0544a0e3e221863f48013fcd56b216fbbb531d7918a6617e78bfe9225524b366cb692ca093c9851aab8a95"
        "73f6622fc9881a91235771940050dbfb0e36df41e858aebf01a0b05fe8eb595517f459ac316e552ef3cb687c4607369b5066bb6f199e0e"
        "a6cf05a0427e40d6e6955dc4e05f009365a06287cf64a87dc55d3105d3cde13ec8126f6ea07797d30d4984a438e844c3b0023c5d5e19ab"
        "a8c8eaefa43e549f5ab17c893635a0378b21ea81042c2e6e1d9bc02ab4b1c43bde3acade9ccfe93847d17bb6f90ffca0ad018679228e83"
        "ada58d378e4371ac2266f6301fe35cb6f50809cffcfc7a1970a0e65efbcba2105e2c5803d7e611df4f55a488bddb0be57b921d3ceb8b8b"
        "5f9293a00c8b2a4135ce9d24a93af5d67f321f0a133c180ae57a203bcacbc26e8bdbc7e2a0327c28af7ddc04f81cf79d75418e3c6a5948"
        "d0650c0881863000071372c95f7ca09671d2eac9122df79d1423f7cb5f65c7d2fba3b9cf7cc11e05b4c92a6f80698da0c658bcafc8219b"
        "1f779e4f287ad62eabf99cecf2e182d4e1a18ecf5bfaaab026a0093b6aefc3c9c918e18518dd58aa912fac2a671393d4f3154f96de757c"
        "0ae7d5a0bd3e06615dce439278e724f20623c80f8db7ecd9eaa5f4d64e2f10bca6b79d8480");
    odb.insert(h256{"0x52f3c28f7cf697e29c856e28af0f0d8897d037fa654dd6f8ef40b5ae2c063580"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f89180a05587725cb2fcc223d2ec8a0050391622bc117ca1b828e69e91682bb234d04a24808080a0b1655356d88404b329b99634538b11"
        "2a0a895830a16282c52c280be7306b44aca0ba4ba8e064b1fc2273267fd1942f211233edd61388c6c5644d561dd0f2a491518080808080"
        "808080a010d3c12c3e1efce1c97c3530a568ebfb38479624a66e6f8cab462b9a90b0b43480");
    odb.insert(h256{"0x1066914f3c68c80fa50c85129d4093a354b3749c343871e17ca4ab349fea0544"}, valueBytes);
    valueBytes = silkworm::db::getBytesConstRefFromHex(
        "f8749f209f05d2dac481a991ac6466e42d76cfcbfe9d59681d3f255cc95c3b87cbe0b852f8508210108a174ad8c57448e54b0438a056e8"
        "1f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b"
        "7bfad8045d85a470");
    odb.insert(h256{"0xb1655356d88404b329b99634538b112a0a895830a16282c52c280be7306b44ac"}, valueBytes);
}

StageResult insert_blocks(mdbx::txn& txn, const std::vector<std::string>& blocks_rlp) {
    auto state{db::open_cursor(txn, db::table::kHeaders)};

    for (auto& block_rlp : blocks_rlp) {
        Bytes rlp_bytes{*from_hex(block_rlp)};
        ByteView in{rlp_bytes};
        Block block{};
        Bytes rlp{};
        if (rlp::decode(in, block) != rlp::DecodingResult::kOk) return StageResult::kDecodingError;
        block.recover_senders();
        rlp::encode(rlp, block.header);
        auto key{db::block_key(block.header.number, block.header.hash().bytes)};
        auto contains = state.find(mdbx::slice(key), false);
        if (!contains) txn.insert(db::open_map(txn, db::table::kHeaders), mdbx::slice(key), mdbx::slice(rlp));
    }
    return StageResult::kSuccess;
}

StageResult execute_block(mdbx::txn& txn, Block& block, OverlayDB& odb) {
    TransactionManager tm{txn};
    const auto config{db::read_chain_config(*tm)};
    const auto storage_mode{db::read_storage_mode(*tm)};

    OverlayState buffer{odb};
    auto block_num{block.header.number};
    AnalysisCache analysis_cache;
    ExecutionStatePool state_pool;
    std::vector<Receipt> receipts;

    auto consensus_engine{consensus::engine_factory(*config)};
    if (!consensus_engine) {
        return StageResult::kUnknownConsensusEngine;
    }


    //    std::optional<BlockWithHash> bh;
    //
    //    bh->block = block;
    //    bh->hash = block.header.hash();

    ExecutionProcessor processor{block, *consensus_engine, buffer, *config};
    processor.evm().advanced_analysis_cache = &analysis_cache;
    processor.evm().state_pool = &state_pool;

    if (const auto res{processor.execute_and_write_block(receipts)}; res != ValidationResult::kOk) {
        SILKWORM_LOG(LogLevel::Error) << "Validation error " << magic_enum::enum_name<ValidationResult>(res)
                                      << " at block " << block_num << std::endl;
        return StageResult::kInvalidBlock;
    }

    if (storage_mode.Receipts && block_num >= 0) {
        buffer.insert_receipts(block_num, receipts);
    }

    SILKWORM_LOG(LogLevel::Debug) << "Blocks <= " << block_num << " executed" << std::endl;
//    buffer.write_to_db();
    return StageResult::kSuccess;
}

// block_num is input-output
static StageResult execute_batch_of_blocks(mdbx::txn& txn, const ChainConfig& config, const uint64_t max_block,
                                           const db::StorageMode& storage_mode, const size_t batch_size,
                                           uint64_t& block_num, uint64_t prune_from) noexcept {
    try {
        db::Buffer buffer{txn, prune_from};
        AnalysisCache analysis_cache;
        ExecutionStatePool state_pool;
        std::vector<Receipt> receipts;
        auto consensus_engine{consensus::engine_factory(config)};
        if (!consensus_engine) {
            return StageResult::kUnknownConsensusEngine;
        }
        while (true) {
            std::optional<BlockWithHash> bh{db::read_block(txn, block_num, /*read_senders=*/true)};
            if (bh == std::nullopt) {
                return StageResult::kBadChainSequence;
            }

            ExecutionProcessor processor{bh->block, *consensus_engine, buffer, config};
            processor.evm().advanced_analysis_cache = &analysis_cache;
            processor.evm().state_pool = &state_pool;

            if (const auto res{processor.execute_and_write_block(receipts)}; res != ValidationResult::kOk) {
                SILKWORM_LOG(LogLevel::Error) << "Validation error " << magic_enum::enum_name<ValidationResult>(res)
                                              << " at block " << block_num << std::endl;
                return StageResult::kInvalidBlock;
            }

            if (storage_mode.Receipts && block_num >= prune_from) {
                buffer.insert_receipts(block_num, receipts);
            }

            if (block_num % 1000 == 0) {
                SILKWORM_LOG(LogLevel::Debug) << "Blocks <= " << block_num << " executed" << std::endl;
            }

            if (buffer.current_batch_size() >= batch_size || block_num >= max_block) {
                buffer.write_to_db();
                return StageResult::kSuccess;
            }

            ++block_num;
        }
    } catch (const mdbx::exception& ex) {
        SILKWORM_LOG(LogLevel::Error) << "DB error " << ex.what() << " at block " << block_num << std::endl;
        return StageResult::kDbError;
    } catch (const db::MissingSenders&) {
        SILKWORM_LOG(LogLevel::Error) << "Missing or incorrect senders at block " << block_num << std::endl;
        return StageResult::kMissingSenders;
    } catch (const rlp::DecodingError& ex) {
        SILKWORM_LOG(LogLevel::Error) << ex.what() << " at block " << block_num << std::endl;
        return StageResult::kDecodingError;
    } catch (const std::exception& ex) {
        SILKWORM_LOG(LogLevel::Error) << "Unexpected error " << ex.what() << " at block " << block_num << std::endl;
        return StageResult::kUnexpectedError;
    } catch (...) {
        SILKWORM_LOG(LogLevel::Error) << "Unkown error at block " << block_num << std::endl;
        return StageResult::kUnknownError;
    }
}

StageResult stage_execution(TransactionManager& txn, const std::filesystem::path&, size_t batch_size,
                            uint64_t prune_from) {
    StageResult res{StageResult::kSuccess};

    try {
        const auto chain_config{db::read_chain_config(*txn)};
        if (!chain_config.has_value()) {
            return StageResult::kUnknownChainId;
        }
        const auto storage_mode{db::read_storage_mode(*txn)};

        uint64_t max_block{db::stages::get_stage_progress(*txn, db::stages::kBlockBodiesKey)};
        uint64_t block_num{db::stages::get_stage_progress(*txn, db::stages::kExecutionKey) + 1};
        if (block_num > max_block) {
            SILKWORM_LOG(LogLevel::Error) << "Stage progress is " << (block_num - 1)
                                          << " which is <= than requested block_to " << max_block << std::endl;
            return StageResult::kInvalidRange;
        }

        // Execution needs senders hence we need to check whether sender's stage is
        // at least at max_block as set above
        uint64_t max_block_senders{db::stages::get_stage_progress(*txn, db::stages::kSendersKey)};
        if (max_block > max_block_senders) {
            SILKWORM_LOG(LogLevel::Error) << "Sender's stage progress is " << (max_block_senders)
                                          << " which is <= than requested block_to " << max_block << std::endl;
            return StageResult::kMissingSenders;
        }

        StopWatch sw{};
        (void)sw.start();

        for (; block_num <= max_block; ++block_num) {
            res = execute_batch_of_blocks(*txn, chain_config.value(), max_block, storage_mode, batch_size, block_num,
                                          prune_from);
            if (res != StageResult::kSuccess) {
                return res;
            }

            db::stages::set_stage_progress(*txn, db::stages::kExecutionKey, block_num);

            txn.commit();

            (void)sw.lap();
            SILKWORM_LOG(LogLevel::Info) << (block_num == max_block ? "All blocks" : "Blocks") << " <= " << block_num
                                         << " committed"
                                         << " in " << sw.format(sw.laps().back().second) << std::endl;
        }
    } catch (const mdbx::exception& ex) {
        SILKWORM_LOG(LogLevel::Error) << "DB Error " << ex.what() << " in stage_execution" << std::endl;
        return StageResult::kDbError;
    } catch (const std::exception& ex) {
        SILKWORM_LOG(LogLevel::Error) << "Unexpected error " << ex.what() << " in stage execution " << std::endl;
        return StageResult::kUnexpectedError;
    }

    return res;
}

// Revert State for given address/storage location
static void revert_state(Bytes key, Bytes value, mdbx::cursor& plain_state_table, mdbx::cursor& plain_code_table) {
    if (key.size() == kAddressLength) {
        if (value.size() > 0) {
            auto [account, err1]{decode_account_from_storage(value)};
            rlp::err_handler(err1);
            if (account.incarnation > 0 && account.code_hash == kEmptyHash) {
                Bytes code_hash_key(kAddressLength + db::kIncarnationLength, '\0');
                std::memcpy(&code_hash_key[0], &key[0], kAddressLength);
                endian::store_big_u64(&code_hash_key[kAddressLength], account.incarnation);
                auto new_code_hash{plain_code_table.find(db::to_slice(code_hash_key))};
                std::memcpy(&account.code_hash.bytes[0], new_code_hash.value.iov_base, kHashLength);
            }
            // cleaning up contract codes
            auto state_account_encoded{plain_state_table.find(db::to_slice(key), /*throw_notfound=*/false)};
            if (state_account_encoded) {
                auto [state_incarnation, err2]{extract_incarnation(db::from_slice(state_account_encoded.value))};
                rlp::err_handler(err2);
                // cleanup each code incarnation
                for (uint64_t i = state_incarnation; i > account.incarnation && i > 0; --i) {
                    Bytes key_hash(kAddressLength + 8, '\0');
                    std::memcpy(&key_hash[0], key.data(), kAddressLength);
                    endian::store_big_u64(&key_hash[kAddressLength], i);
                    if (plain_code_table.seek(db::to_slice(key_hash))) {
                        plain_code_table.erase();
                    }
                }
            }
            auto new_encoded_account{account.encode_for_storage(false)};
            if (plain_state_table.seek(db::to_slice(key))) {
                plain_state_table.erase(/*whole_multivalue*/ true);
            }
            plain_state_table.upsert(db::to_slice(key), db::to_slice(new_encoded_account));
        } else {
            if (plain_code_table.seek(db::to_slice(key))) {
                plain_code_table.erase();
            }
        }
        return;
    }
    auto location{key.substr(kAddressLength + db::kIncarnationLength)};
    auto key1{key.substr(0, kAddressLength + db::kIncarnationLength)};
    if (db::find_value_suffix(plain_state_table, key1, location) != std::nullopt) {
        plain_state_table.erase();
    }
    if (value.size() > 0) {
        auto data{location.append(value)};
        plain_state_table.upsert(db::to_slice(key1), db::to_slice(data));
    }
    return;
}

// For given changeset cursor/bucket it reverts the changes on states buckets
static void unwind_state_from_changeset(mdbx::cursor& source, mdbx::cursor& plain_state_table,
                                        mdbx::cursor& plain_code_table, uint64_t unwind_to) {
    uint64_t block_number{0};
    auto src_data{source.to_last(/*throw_notfound*/ false)};
    while (src_data) {
        Bytes key(db::from_slice(src_data.key));
        Bytes value(db::from_slice(src_data.value));
        block_number = endian::load_big_u64(&key[0]);
        if (block_number == unwind_to) {
            break;
        }
        auto [new_key, new_value]{convert_to_db_format(key, value)};
        revert_state(new_key, new_value, plain_state_table, plain_code_table);
        src_data = source.to_previous(/*throw_notfound*/ false);
    }
}

StageResult unwind_execution(TransactionManager& txn, const std::filesystem::path&, uint64_t unwind_to) {
    uint64_t block_number{db::stages::get_stage_progress(*txn, db::stages::kExecutionKey)};

    auto plain_state_table{db::open_cursor(*txn, db::table::kPlainState)};
    auto plain_code_table{db::open_cursor(*txn, db::table::kPlainContractCode)};
    auto account_changeset_table{db::open_cursor(*txn, db::table::kAccountChangeSet)};
    auto storage_changeset_table{db::open_cursor(*txn, db::table::kStorageChangeSet)};
    auto receipts_table{db::open_cursor(*txn, db::table::kBlockReceipts)};
    auto log_table{db::open_cursor(*txn, db::table::kLogs)};
    auto traces_table{db::open_cursor(*txn, db::table::kCallTraceSet)};

    if (unwind_to == 0) {
        txn->clear_map(plain_state_table.map());
        txn->clear_map(plain_code_table.map());
        txn->clear_map(account_changeset_table.map());
        txn->clear_map(storage_changeset_table.map());
        txn->clear_map(receipts_table.map());
        txn->clear_map(log_table.map());
        txn->clear_map(traces_table.map());
        db::stages::set_stage_progress(*txn, db::stages::kExecutionKey, 0);
        txn.commit();
        return StageResult::kSuccess;
    }

    if (unwind_to >= block_number) {
        return StageResult::kSuccess;
    }

    SILKWORM_LOG(LogLevel::Info) << "Unwind Execution from " << block_number << " to " << unwind_to << std::endl;

    unwind_state_from_changeset(account_changeset_table, plain_state_table, plain_code_table, unwind_to);
    unwind_state_from_changeset(storage_changeset_table, plain_state_table, plain_code_table, unwind_to);
    // We set the cursor data
    Bytes unwind_to_bytes(8, '\0');
    endian::store_big_u64(&unwind_to_bytes[0], unwind_to + 1);

    // Truncate Tables
    truncate_table_from(account_changeset_table, unwind_to_bytes);
    truncate_table_from(storage_changeset_table, unwind_to_bytes);
    truncate_table_from(receipts_table, unwind_to_bytes);
    truncate_table_from(log_table, unwind_to_bytes);
    truncate_table_from(traces_table, unwind_to_bytes);

    db::stages::set_stage_progress(*txn, db::stages::kExecutionKey, unwind_to);
    txn.commit();

    return StageResult::kSuccess;
}

StageResult prune_execution(TransactionManager& txn, const std::filesystem::path&, uint64_t prune_from) {
    auto new_tail{db::block_key(prune_from)};
    SILKWORM_LOG(LogLevel::Info) << "Pruning Execution from: " << prune_from << std::endl;

    auto account_changeset_table{db::open_cursor(*txn, db::table::kAccountChangeSet)};
    auto storage_changeset_table{db::open_cursor(*txn, db::table::kStorageChangeSet)};
    auto receipts_table{db::open_cursor(*txn, db::table::kBlockReceipts)};
    auto traces_table{db::open_cursor(*txn, db::table::kCallTraceSet)};
    auto log_table{db::open_cursor(*txn, db::table::kLogs)};
    // Truncate Tables
    truncate_table_from(account_changeset_table, new_tail, /* reverse = */ true);
    SILKWORM_LOG(LogLevel::Info) << "Pruned Account Changesets" << std::endl;
    truncate_table_from(storage_changeset_table, new_tail, /* reverse = */ true);
    SILKWORM_LOG(LogLevel::Info) << "Pruned Storage Changesets" << std::endl;
    truncate_table_from(receipts_table, new_tail, /* reverse = */ true);
    SILKWORM_LOG(LogLevel::Info) << "Pruned Receipts" << std::endl;
    truncate_table_from(traces_table, new_tail, /* reverse = */ true);
    SILKWORM_LOG(LogLevel::Info) << "Pruned Traces" << std::endl;
    truncate_table_from(log_table, new_tail, /* reverse = */ true);
    SILKWORM_LOG(LogLevel::Info) << "Pruned Logs" << std::endl;

    txn.commit();
    SILKWORM_LOG(LogLevel::Info) << "Pruning Execution finished..." << std::endl;

    return StageResult::kSuccess;
}

}  // namespace silkworm::stagedsync
